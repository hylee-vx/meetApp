{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","mockdata.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showDetails","handleClick","setState","previousState","event","this","props","className","summary","start","dateTime","timeZone","location","href","htmlLink","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","showSuggestions","undefined","handleInputChange","value","target","locations","filter","toUpperCase","indexOf","handleItemClick","suggestion","updateEvents","type","onChange","onFocus","style","display","NumberOfEvents","numberEvents","mockData","extractLocations","Set","getEvents","a","App","then","locationEvents","mounted","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mOAiDeA,E,4MA9CXC,MAAQ,CACJC,aAAa,G,EAGjBC,YAAc,WACV,EAAKC,UAAS,SAAAC,GAAa,MAAK,CAC5BH,aAAcG,EAAcH,iB,4CAIpC,WAAU,IAAD,OACGI,EAAUC,KAAKC,MAAfF,MACAJ,EAAgBK,KAAKN,MAArBC,YAER,OACI,sBAAKO,UAAU,QAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,6BAAKH,EAAMI,UACX,4BAAIJ,EAAMK,MAAMC,WAChB,4BAAIN,EAAMK,MAAME,WAChB,4BAAIP,EAAMQ,cAGbZ,EACK,gCACE,sBAAKO,UAAU,gBAAf,UACI,mBAAGM,KAAMT,EAAMU,SAAf,4CACA,4BAAIV,EAAMW,iBAEd,wBACIR,UAAU,mBACVS,QAAS,kBAAM,EAAKf,eAFxB,6BAKF,wBACEM,UAAU,mBACVS,QAAS,kBAAM,EAAKf,eAFtB,iC,GAnCFgB,aCeLC,EAdG,SAAAZ,GACd,IAAQa,EAAWb,EAAXa,OAER,OACI,oBAAIZ,UAAU,YAAd,SACKY,EAAOC,KAAI,SAAAhB,GAAK,OACb,6BACI,cAAC,EAAD,CAAOA,MAAOA,KADTA,EAAMiB,UCsDhBC,E,4MA5DXvB,MAAQ,CACJwB,MAAO,GACPC,YAAa,GACbC,qBAAiBC,G,EAGrBC,kBAAoB,SAAAvB,GAChB,IAAMwB,EAAQxB,EAAMyB,OAAOD,MACrBJ,EAAc,EAAKlB,MAAMwB,UAAUC,QAAO,SAAAnB,GAC5C,OAAOA,EAASoB,cAAcC,QAAQL,EAAMI,gBAAkB,KAGlE,EAAK9B,SAAS,CACVqB,MAAOK,EACPJ,iB,EAIRU,gBAAkB,SAAAC,GACd,EAAKjC,SAAS,CACVqB,MAAOY,EACPV,iBAAiB,IAGrB,EAAKnB,MAAM8B,aAAaD,I,4CAI5B,WAAU,IAAD,OACL,OACI,sBAAK5B,UAAU,aAAf,UACI,uBACI8B,KAAK,OACL9B,UAAU,OACVqB,MAAOvB,KAAKN,MAAMwB,MAClBe,SAAUjC,KAAKsB,kBACfY,QAAS,WAAQ,EAAKrC,SAAS,CAAEuB,iBAAiB,OAGtD,qBACIlB,UAAU,cACViC,MAAOnC,KAAKN,MAAM0B,gBAAkB,GAAK,CAAEgB,QAAS,QAFxD,UAIKpC,KAAKN,MAAMyB,YAAYJ,KAAI,SAAAe,GAAU,OAClC,oBAEInB,QAAS,kBAAM,EAAKkB,gBAAgBC,IAFxC,SAGEA,GAFOA,MAIb,oBAEInB,QAAS,kBAAM,EAAKkB,gBAAgB,QAFxC,SAGI,gDAFI,iB,GAnDHjB,aC0BVyB,E,4MAzBX3C,MAAQ,CACJ4C,aAAc,I,EAGlBhB,kBAAoB,SAAAvB,GAChB,IAAMwB,EAAQxB,EAAMyB,OAAOD,MAC3B,EAAK1B,SAAS,CACVyC,aAAcf,K,4CAItB,WACI,OACI,qBAAKrB,UAAU,iBAAf,SACI,uBACI8B,KAAK,SACL9B,UAAU,cACVqB,MAAOvB,KAAKN,MAAM4C,aAClBL,SAAUjC,KAAKsB,0B,GAnBNV,a,uCCFvB2B,EAAW,CACb,CACI,KAAQ,iBACR,KAAQ,qBACR,GAAM,8CACN,OAAU,YACV,SAAY,oJACZ,QAAW,2BACX,QAAW,2BACX,QAAW,mBACX,YAAe,uWACf,SAAY,aACZ,QAAW,CACP,MAAS,oCACT,MAAQ,GAEZ,UAAa,CACT,MAAS,oCACT,MAAQ,GAEZ,MAAS,CACL,SAAY,4BACZ,SAAY,iBAEhB,IAAO,CACH,SAAY,4BACZ,SAAY,iBAEhB,iBAAoB,6BACpB,kBAAqB,CACjB,SAAY,4BACZ,SAAY,iBAEhB,QAAW,wCACX,SAAY,EACZ,UAAa,CACT,YAAc,GAElB,UAAa,WAEjB,CACI,KAAQ,iBACR,KAAQ,qBACR,GAAM,8CACN,OAAU,YACV,SAAY,oJACZ,QAAW,2BACX,QAAW,2BACX,QAAW,eACX,YAAe,mSACf,SAAY,kBACZ,QAAW,CACP,MAAS,oCACT,MAAQ,GAEZ,UAAa,CACT,MAAS,oCACT,MAAQ,GAEZ,MAAS,CACL,SAAY,4BACZ,SAAY,iBAEhB,IAAO,CACH,SAAY,4BACZ,SAAY,iBAEhB,iBAAoB,6BACpB,kBAAqB,CACjB,SAAY,4BACZ,SAAY,iBAEhB,QAAW,wCACX,SAAY,EACZ,UAAa,CACT,YAAc,GAElB,UAAa,YC3ERC,EAAmB,SAAA1B,GAC5B,IAAI0B,EAAmB1B,EAAOC,KAAI,SAAAhB,GAAK,OAAIA,EAAMQ,YAGjD,OADa,YAAO,IAAIkC,IAAID,KAInBE,EAAS,uCAAG,sBAAAC,EAAA,+EACdJ,GADc,2CAAH,qDC0CPK,E,4MA3CblD,MAAQ,CACNoB,OAAQ,GACRW,UAAW,I,EAmBbM,aAAe,SAAAxB,GACbmC,IAAYG,MAAK,SAAA/B,GACf,IAAMgC,EAA+B,QAAbvC,EACpBO,EACAA,EAAOY,QAAO,SAAA3B,GAAK,OAAIA,EAAMQ,WAAaA,KAC9C,EAAKV,SAAS,CACZiB,OAAQgC,Q,uDAtBd,WAAqB,IAAD,OAClB9C,KAAK+C,SAAU,EACfL,IAAYG,MAAK,SAAA/B,GACX,EAAKiC,SACP,EAAKlD,SAAS,CACZiB,SACAW,UAAWe,EAAiB1B,U,kCAMpC,WACEd,KAAK+C,SAAU,I,oBAcjB,WACE,OACE,sBAAK7C,UAAU,MAAf,UACE,cAAC,EAAD,CAAYuB,UAAWzB,KAAKN,MAAM+B,UAAWM,aAAc/B,KAAK+B,eAChE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWjB,OAAQd,KAAKN,MAAMoB,gB,GAtCpBF,aCKEoC,QACW,cAA7BC,OAAO1C,SAAS2C,UAEe,UAA7BD,OAAO1C,SAAS2C,UAEhBD,OAAO1C,SAAS2C,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAACuB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BrB,M","file":"static/js/main.e67d87a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n    state = {\n        showDetails: false\n    };\n\n    handleClick = () => {\n        this.setState(previousState => ({\n            showDetails: !previousState.showDetails\n        }));\n    }\n\n    render() {\n        const { event } = this.props;\n        const { showDetails } = this.state;\n\n        return (\n            <div className=\"event\">\n                <div className=\"event-summary\">\n                    <h2>{event.summary}</h2>\n                    <p>{event.start.dateTime}</p>\n                    <p>{event.start.timeZone}</p>\n                    <p>{event.location}</p>\n                </div>\n\n                {showDetails\n                    ? <div>\n                        <div className=\"event-details\">\n                            <a href={event.htmlLink}>See details on Google Calendar</a>\n                            <p>{event.description}</p>\n                        </div>\n                        <button\n                            className=\"hide-details-btn\"\n                            onClick={() => this.handleClick()}\n                        >Hide details</button>\n                    </div>\n                    : <button\n                        className=\"show-details-btn\"\n                        onClick={() => this.handleClick()}\n                    >Show details</button>\n                }\n\n\n            </div>\n        );\n    }\n};\n\nexport default Event;","import React from 'react';\nimport Event from './Event';\n\nconst EventList = props => {\n    const { events } = props;\n\n    return (\n        <ul className=\"EventList\">\n            {events.map(event =>\n                <li key={event.id}>\n                    <Event event={event} />\n                </li>\n            )}\n        </ul>\n    );\n};\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n    state = {\n        query: '',\n        suggestions: [],\n        showSuggestions: undefined\n    };\n\n    handleInputChange = event => {\n        const value = event.target.value;\n        const suggestions = this.props.locations.filter(location => {\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n        });\n\n        this.setState({\n            query: value,\n            suggestions\n        });\n    }\n\n    handleItemClick = suggestion => {\n        this.setState({\n            query: suggestion,\n            showSuggestions: false\n        });\n\n        this.props.updateEvents(suggestion);\n    }\n\n\n    render() {\n        return (\n            <div className=\"CitySearch\" >\n                <input\n                    type=\"text\"\n                    className=\"city\"\n                    value={this.state.query}\n                    onChange={this.handleInputChange}\n                    onFocus={() => { this.setState({ showSuggestions: true }) }}\n                />\n\n                <ul\n                    className=\"suggestions\"\n                    style={this.state.showSuggestions ? {} : { display: 'none' }}\n                >\n                    {this.state.suggestions.map(suggestion => (\n                        <li\n                            key={suggestion}\n                            onClick={() => this.handleItemClick(suggestion)}\n                        >{suggestion}</li>\n                    ))}\n                    <li\n                        key='all'\n                        onClick={() => this.handleItemClick('all')}>\n                        <b>See all cities</b>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n    state = {\n        numberEvents: 32\n    };\n\n    handleInputChange = event => {\n        const value = event.target.value;\n        this.setState({\n            numberEvents: value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"NumberOfEvents\">\n                <input\n                    type=\"number\"\n                    className=\"numberInput\"\n                    value={this.state.numberEvents}\n                    onChange={this.handleInputChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default NumberOfEvents;","const mockData = [\n    {\n        \"kind\": \"calendar#event\",\n        \"etag\": \"\\\"3181161784712000\\\"\",\n        \"id\": \"4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z\",\n        \"status\": \"confirmed\",\n        \"htmlLink\": \"https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\n        \"created\": \"2020-05-19T19:17:46.000Z\",\n        \"updated\": \"2020-05-27T12:01:32.356Z\",\n        \"summary\": \"Learn JavaScript\",\n        \"description\": \"Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.\",\n        \"location\": \"London, UK\",\n        \"creator\": {\n            \"email\": \"fullstackwebdev@careerfoundry.com\",\n            \"self\": true\n        },\n        \"organizer\": {\n            \"email\": \"fullstackwebdev@careerfoundry.com\",\n            \"self\": true\n        },\n        \"start\": {\n            \"dateTime\": \"2020-05-19T16:00:00+02:00\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        \"end\": {\n            \"dateTime\": \"2020-05-19T17:00:00+02:00\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        \"recurringEventId\": \"4eahs9ghkhrvkld72hogu9ph3e\",\n        \"originalStartTime\": {\n            \"dateTime\": \"2020-05-19T16:00:00+02:00\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        \"iCalUID\": \"4eahs9ghkhrvkld72hogu9ph3e@google.com\",\n        \"sequence\": 0,\n        \"reminders\": {\n            \"useDefault\": true\n        },\n        \"eventType\": \"default\"\n    },\n    {\n        \"kind\": \"calendar#event\",\n        \"etag\": \"\\\"3181159875584000\\\"\",\n        \"id\": \"3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z\",\n        \"status\": \"confirmed\",\n        \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\n        \"created\": \"2020-05-19T19:14:30.000Z\",\n        \"updated\": \"2020-05-27T11:45:37.792Z\",\n        \"summary\": \"React is Fun\",\n        \"description\": \"Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. \",\n        \"location\": \"Berlin, Germany\",\n        \"creator\": {\n            \"email\": \"fullstackwebdev@careerfoundry.com\",\n            \"self\": true\n        },\n        \"organizer\": {\n            \"email\": \"fullstackwebdev@careerfoundry.com\",\n            \"self\": true\n        },\n        \"start\": {\n            \"dateTime\": \"2020-05-20T14:00:00+02:00\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        \"end\": {\n            \"dateTime\": \"2020-05-20T15:00:00+02:00\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        \"recurringEventId\": \"3qtd6uscq4tsi6gc7nmmtpqlct\",\n        \"originalStartTime\": {\n            \"dateTime\": \"2020-05-20T14:00:00+02:00\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        \"iCalUID\": \"3qtd6uscq4tsi6gc7nmmtpqlct@google.com\",\n        \"sequence\": 0,\n        \"reminders\": {\n            \"useDefault\": true\n        },\n        \"eventType\": \"default\"\n    }\n];\n\nexport { mockData };","import { mockData } from './mockdata';\n\nexport const extractLocations = events => {\n    let extractLocations = events.map(event => event.location);\n    // Set object stores unique values of any type ie will remove duplicates in extractLocations array\n    let locations = [...new Set(extractLocations)];\n    return locations;\n}\n\nexport const getEvents = async () => {\n    return mockData;\n};","import React, { Component } from 'react';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport './App.css';\nimport { getEvents, extractLocations } from './api';\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then(events => {\n      if (this.mounted) {\n        this.setState({\n          events,\n          locations: extractLocations(events)\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  updateEvents = location => {\n    getEvents().then(events => {\n      const locationEvents = (location === 'all')\n        ? events\n        : events.filter(event => event.location === location);\n      this.setState({\n        events: locationEvents\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <NumberOfEvents />\n        <EventList events={this.state.events} />\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}